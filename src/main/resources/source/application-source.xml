<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
          http://www.springframework.org/schema/beans/spring-beans-3.1.xsd   
          http://www.springframework.org/schema/context   
          http://www.springframework.org/schema/context/spring-context-3.1.xsd   
          http://www.springframework.org/schema/aop   
          http://www.springframework.org/schema/aop/spring-aop-3.1.xsd   
          http://www.springframework.org/schema/tx    
          http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
          http://www.springframework.org/schema/cache 
          http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
          http://www.springframework.org/schema/data/jpa
          http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
          
	<bean id="uapread" name="uapread" autowire="byName" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="#{jpaProps['spring.datasource.source.read.driver-class-name']}" />
		<property name="url"
			value="#{jpaProps['spring.datasource.source.read.url']}" />
		<property name="username" value="#{jpaProps['spring.datasource.source.read.username']}" />
		<property name="password" value="#{jpaProps['spring.datasource.source.read.password']}" />
	</bean>

	<bean id="uapwrite" name="uapwrite"  primary="true"  autowire="byName" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="#{jpaProps['spring.datasource.source.write.driver-class-name']}" />
		<property name="url"
			value="#{jpaProps['spring.datasource.source.write.url']}" />
		<property name="username" value="#{jpaProps['spring.datasource.source.write.username']}" />
		<property name="password" value="#{jpaProps['spring.datasource.source.write.password']}" />
	</bean>

	<!--动态选择数据源 -->
	<bean id="uapdataSource" name="uapdataSource" autowire="byName"  class="com.suixingpay.turbo.framework.jpa.datasource.DynamicDataSource" 
		>
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="READ" value-ref="uapread" />
				<entry key="WRITE" value-ref="uapwrite" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="uapwrite"/>
	</bean>

	<bean id="uapentityManagerFactory"  primary="true" name="uapentityManagerFactory" autowire="byName"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		destroy-method="destroy" 
		>
		<!-- 这里将动态数据源bean注入 -->
		<property name="dataSource" ref="uapdataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="packagesToScan" value="com.suixingpay.etl.Cams.core.source.domain" />
		<property name="jpaPropertyMap">
			<map>
				<entry key="javax.persistence.schema-generation.database.action"
					value="none" />
			</map>
		</property>
	</bean>

	<bean id="uaptransactionManager"  primary="true" name="uaptransactionManager" autowire="byName" class="org.springframework.orm.jpa.JpaTransactionManager" >

		<property name="entityManagerFactory" ref="uapentityManagerFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="uaptransactionManager" />
	
	<jpa:repositories base-package="com.suixingpay.etl.Cams.core.source.dao"
	entity-manager-factory-ref="uapentityManagerFactory" 
	transaction-manager-ref="uaptransactionManager"
	factory-class="com.suixingpay.turbo.framework.jpa.repository.base.BaseRepositoryFactoryBean"
	/>
</beans>  